package server;

import io.Chunk;
import io.ChunkManager;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;

import transmission.CloseRequest;
import transmission.CompressedClientUpdate;
import transmission.EntityUpdate;
import transmission.ServerUpdate;
import transmission.UpdateWithObject;
import utils.ErrorUtils;
import utils.FileManager;
import world.World;
import entities.EntityPlayer;

/**
 * <code>GameEngine</code> is the class responsible for running the main game loop, and other core features of multiple worlds.
 * <code>GameEngine</code> defines 4 important methods. 
 * <br><br>
 * The method {@link #startGame(World, EntityPlayer)} defines the method to actually start the game with the specified World object
 * and player. This will close the main menu and begin rendering based on the Chunk data. 
 * <br><br>
 * Most of the application's life cycle is spent in {@link #run()} method, which contains the main game loop. This handles
 * everything from the main menu to the game, and save menu. Before exiting this method, {@link #saveSettings()} will be called
 * to update any settings changed during runtime. 
 * <br><br>
 * Additional methods of interest: <br>
 * {@link #changeWorld(int)}, {@link #closeGameToMenu()}
 *   
 * 
 * @author      Alec Sobeck
 * @author      Matthew Robertson
 * @version     1.0
 * @since       1.0
 */
public class GameEngine 
{
	/** The number of game ticks per second - this will always be 20 */
	public static final int TICKS_PER_SECOND = 20;
	private World world;
	private Vector<EntityPlayer> players = new Vector<EntityPlayer>(10);
	public ChunkManager chunkManager;
	private String universeName;
	private List<String> pendingChunkRequests = new ArrayList<String>();
	
	private Vector<UpdateWithObject> extraObjectUpdates = new Vector<UpdateWithObject>();
	private Vector<EntityUpdate> extraEntityUpdates = new Vector<EntityUpdate>();
	/**Updates provided by a client that are not yet processed.*/
	private Vector<CompressedClientUpdate> clientUpdates = new Vector<CompressedClientUpdate>(); 
	private Vector<String> extraTextUpdates = new Vector<String>();
	/**Commands that are generated by the server and need processed. IE console commands. */
	private Vector<String> serverCommands = new Vector<String>();
	/**Clients which have requested a connection be terminated.*/
	private Vector<CloseRequest> closeRequests = new Vector<CloseRequest>();
	
	/**
	 * Creates a new instance of GameEngine. This includes setting the renderMode to RENDER_MODE_WORLD_EARTH
	 * and loading the settings object from disk. If a settings object cannot be found a new one is created. 
	 */
	public GameEngine(String universeName)
	{
		this.universeName = universeName;
		this.chunkManager = new ChunkManager();
		this.chunkManager.setUniverseName(universeName);
	}
	
	public void run()
	{
		try {
			loadWorld();			
			//Variables for the gameloop cap (20 times / second)	
			final int SKIP_TICKS = 1000 / TICKS_PER_SECOND;
			final int MAX_FRAMESKIP = 5;
			long next_game_tick = System.currentTimeMillis();
			long start, end;
			int loops;
			start = System.currentTimeMillis();
			
			TerraeRasa.canAcceptConnections = true;
			
		    while(!TerraeRasa.done) //Main Game Loop
		    {
		        loops = 0;
		        while(System.currentTimeMillis() > next_game_tick && loops < MAX_FRAMESKIP) //Update the game 20 times/second 
		        {
//		        	if(player != null && player.defeated)
//		        	{
//		        		hardcoreDeath();
//		        	}	
		        	//TODO: hardcore
		        
		        	
		        	ServerUpdate update = new ServerUpdate();
		        	processCloseRequests();
		        	CompressedClientUpdate[] updates = yieldClientUpdates();
		        	handleClientUpdates(update, updates);
		        	
		        	world.onWorldTick(update, players);
		        	for(EntityUpdate up : extraEntityUpdates)
		        	{
		        		update.addEntityUpdate(up);
		        	}
		        	extraEntityUpdates.clear();
		        	
		        	String[] values = yieldCommandUpdates();
		        	for(String val : values)
		        	{
		        		update.addValue(val);
		        	}
		        	
		        	UpdateWithObject[] objUpdates = yieldExtraObjectUpdates();
		        	for(UpdateWithObject object : objUpdates)
		        	{
		        		update.addObjectUpdate(object);
		        	}
		        	
		        	String[] serverCommands = yieldServerCommands();
		        	for(String val : serverCommands)
		        	{
		        		Commands.processConsoleCommand(TerraeRasa.terraeRasa.getSettings(), update, world, this, val);
		        	}
		        	
		        	Iterator<String> it = pendingChunkRequests.iterator();
		        	while(it.hasNext())
		        	{
		        		String request = it.next();
		        		String[] split = request.split(" ");
		        		
		        		if(world.chunksLoaded.get(split[3]))
						{
							update.addChunkUpdate(world.getChunk(Integer.parseInt(split[3])));
							it.remove();
						}
		        	}
		        	
		        	TerraeRasa.addWorldUpdate(update);
		        	
		        	next_game_tick += SKIP_TICKS;
 		            loops++;
		        }
		        
		        //Make sure the game loop doesn't fall very far behind and have to accelerate the 
		        //game for an extended period of time
		        if(System.currentTimeMillis() - next_game_tick > 1000)
		        {
		        	next_game_tick = System.currentTimeMillis();
		        }
		        if(System.currentTimeMillis() - start >= 5000)
		        {
		        	start = System.currentTimeMillis();
	        		end = System.currentTimeMillis();     
		    	}
//	        	System.out.println(end - start);
		    }     
		} catch(Exception e) {
			//Fatal error catching
			e.printStackTrace();			
			ErrorUtils errorUtils = new ErrorUtils();
			errorUtils.writeErrorToFile(e, true);			
		} finally {
			world.saveRemainingWorld();
			TerraeRasa.done = true;
			TerraeRasa.closeServer();
		}
	}	
	
	private void handleClientUpdates(ServerUpdate serverUpdate, CompressedClientUpdate[] updates)
	{
		for(CompressedClientUpdate update : updates)
		{
			for(String command : update.commands)
			{
				String result = Commands.processClientCommand(serverUpdate, null, world, this, players, command, pendingChunkRequests);
				if(!result.equals(""))
				{
					addCommandUpdate(result);
				}
			}
			for(UpdateWithObject objUpdate : update.objectUpdates)
			{
				String result = Commands.processClientCommand(serverUpdate, objUpdate.object, world, this, players, objUpdate.command, pendingChunkRequests);
				if(!result.equals(""))
				{
					addCommandUpdate(result);
				}
			}
		}
	}
	
	public void addCloseRequest(ServerConnectionThread thread, EntityPlayer player)
	{
		closeRequests.add(new CloseRequest(thread, player));
	}
	
	private void processCloseRequests()
	{
		CloseRequest[] requests = new CloseRequest[closeRequests.size()];
		closeRequests.copyInto(requests);
		closeRequests.clear();
		for(CloseRequest request : requests)
			TerraeRasa.closeClientThread(request.thread, request.player);
	}
	
	public synchronized void registerServerCommand(String command)
	{
		serverCommands.add(command);
	}

	public synchronized String[] yieldServerCommands()
	{
		String[] updates = new String[serverCommands.size()];
		serverCommands.copyInto(updates);
		serverCommands.clear();
		return updates;
	}
	
	public synchronized CompressedClientUpdate[] yieldClientUpdates()
	{
		CompressedClientUpdate[] updates = new CompressedClientUpdate[clientUpdates.size()];
		clientUpdates.copyInto(updates);
		clientUpdates.clear();
		return updates;
	}
	
	public synchronized void registerClientUpdate(CompressedClientUpdate update)
	{
		clientUpdates.add(update);
	}
	
	public World getWorld() {
		return world;
	}
		
	public synchronized String[] yieldCommandUpdates()
	{
		String[] updates = new String[extraTextUpdates.size()];
		extraTextUpdates.copyInto(updates);
		extraTextUpdates.clear();
		return updates;
	}
	
	public synchronized void addCommandUpdate(String command)
	{
		extraTextUpdates.add(command);
	}
	
	public synchronized UpdateWithObject[] yieldExtraObjectUpdates()
	{
		UpdateWithObject[] updates = new UpdateWithObject[extraObjectUpdates.size()];
		extraObjectUpdates.copyInto(updates);
		extraObjectUpdates.clear();
		return updates;
	}
	
	public synchronized void addExtraObjectUpdate(UpdateWithObject update)
	{
		extraObjectUpdates.add(update);
	}
	
	public synchronized EntityPlayer[] getPlayersArray()
	{
		//TODO: make references safer, I think? IE same-tick leaving of the server may be problematic.
		EntityPlayer[] players = new EntityPlayer[this.players.size()];
		this.players.copyInto(players);
		return players;
	}
	
	public synchronized void registerPlayer(EntityPlayer player)
	{
		players.add(player);
		EntityUpdate update = new EntityUpdate();
		update.entityID = player.entityID;
		update.updatedEntity = player.getTransmittable();
		update.action = 'a';
		update.type = 5;
		extraEntityUpdates.add(update);
		world.addPlayer(player);
	}
	
	public synchronized void removePlayer(EntityPlayer player)
	{
		players.remove(player);
		EntityUpdate update = new EntityUpdate();
		update.entityID = player.entityID;
		update.updatedEntity = null;
		update.action = 'r';
		update.type = 5;
		extraEntityUpdates.add(update);
		world.entitiesByID.remove(""+player.entityID);
		player = null;
	}

	public synchronized Chunk requestChunk(int x)
	{
		Chunk chunk = world.getChunk(x);
		if(chunk == null)
		{
			world.forceloadChunk(x);
		}
		return chunk;
	}

//	public synchronized void registerPlayerIssuedCommands(PlayerIssuedCommand command)
//	{
//		playerIssuedCommands.add(command);
//	}
//	
//	public synchronized PlayerIssuedCommand[] emptyPlayerIssuedCommands()
//	{
//		PlayerIssuedCommand[] commands = new PlayerIssuedCommand[playerIssuedCommands.size()];
//		playerIssuedCommands.copyInto(commands);
//		playerIssuedCommands.clear();
//		return commands;
//	}
			
	/**
	 * Initiates a hardcore death - which deletes the player and exits to the main menu. For now.
	 */
	public synchronized void hardcoreDeath()
	{
		//Delete the player
//		FileManager manager = new FileManager();
//		manager.deletefile("/Player Saves/" + player.getName());
//		this.player = null;

		//Save the world
//		world.saveRemainingWorld();
		System.out.println("This doesnt do anything.");
		//TODO: Hardcore
	}
	
	/**
	 * Changes the loaded world to something else. For example, changing from Earth to Hell would use this. Calling
	 * this method forces a save of the remaining World and then loads what's required for the new World. The value 
	 * of the param newMode should correspond to the class variables in GameEngine such as RENDER_MODE_WORLD_EARTH or
	 * RENDER_MODE_WORLD_HELL. Supplying an incorrect value will not load a new World.
	 * @param newMode the final integer value for the new world (indicating what object to manipulate)
	 * @throws IOException indicates a general failure to load the file, not relating to a version error
	 * @throws ClassNotFoundException indicates the saved world version is incompatible
	 */
	public void changeWorld(int newMode)
			throws IOException, ClassNotFoundException
	{
		String worldName = "";
		
		world.saveRemainingWorld();
		world = null;
		
		FileManager manager = new FileManager();
		manager.loadWorld("Earth", worldName);
		
	}
	
	/**
	 * Saves the remaining world that's loaded and the player to their respective save locations before
	 * exiting to the main menu.
	 * @throws FileNotFoundException indicates a failure to find the save location of the player or world
	 * @throws IOException indicates a general failure to save, not relating to the file
	 */
	public void closeGame() 
			throws FileNotFoundException, IOException
	{
//		if(!player.defeated)
//		{
//			FileManager manager = new FileManager();
//			manager.savePlayer(player);
//		}	
		//TODO: some sort of player saving
		//world.saveRemainingWorld();
	}
	
	private void loadWorld()
	{
		File file = new File(TerraeRasa.getBasePath() + "/" + universeName);
		FileManager manager = new FileManager();
		if(file.exists())
		{
			try {
				this.world = manager.loadWorld("/Earth", universeName);
				this.world.chunkManager = this.chunkManager;
			} catch (IOException e) {
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			}
		}
		else
		{
			this.world = manager.generateAndSaveWorld(universeName, 
					TerraeRasa.terraeRasa.getSettings().worldSize, 
					TerraeRasa.terraeRasa.getSettings().worldDifficulty);
		}
		
		Log.log("Loaded Universe: " + universeName);
		
	}
	
	public EntityPlayer getPlayer(String playerName)
	{
		Iterator<EntityPlayer> it = players.iterator();
		while(it.hasNext())
		{
			EntityPlayer player = it.next();
			if(player.getName().equalsIgnoreCase(playerName))
			{
				return player;
			}
		}
		return null;
	}
}