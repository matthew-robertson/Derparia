package net.dimensia.src;
import java.util.Vector;

public class SpawnManager{
	public SpawnManager(){
		if (forestEnemies == null){
			forestEnemies = new Vector<EntityEnemy>();
		}
		
		if (desertEnemies == null){
			desertEnemies = new Vector<EntityEnemy>();
		}
		
		if (arcticEnemies == null){
			arcticEnemies = new Vector<EntityEnemy>();
		}
		
		if (nightEnemies == null){
			nightEnemies = new Vector<EntityEnemy>();
		}
	}
	
	/**
	 * Get the forestEnemies Vector as an array
	 * @return forestEnemies Vector as an array
	 */
	public EntityEnemy[] getForestEnemiesAsArray()
	{
		EntityEnemy[] enemies = new EntityEnemy[forestEnemies.size()];
		forestEnemies.copyInto(enemies);
		return enemies;
	}
	
	/**
	 * Get the desertEnemies Vector as an array
	 * @return desertEnemies Vector as an array
	 */
	public EntityEnemy[] getDesertEnemiesAsArray()
	{
		EntityEnemy[] enemies = new EntityEnemy[desertEnemies.size()];
		desertEnemies.copyInto(enemies);
		return enemies;
	}
	
	/**
	 * Get the arcticEnemies Vector as an array
	 * @return arcticEnemies Vector as an array
	 */
	public EntityEnemy[] getArcticEnemiesAsArray()
	{
		EntityEnemy[] enemies = new EntityEnemy[arcticEnemies.size()];
		arcticEnemies.copyInto(enemies);
		return enemies;
	}
	
	/**
	 * Get the nightEnemies Vector as an array
	 * @return nightEnemies Vector as an array
	 */
	public EntityEnemy[] getNightEnemiesAsArray()
	{
		EntityEnemy[] enemies = new EntityEnemy[nightEnemies.size()];
		nightEnemies.copyInto(enemies);
		return enemies;
	}
	
	
	/**
	 * add an enemy to the forestEnemies vector
	 * @param enemy to add.
	 */
	public void addForestEnemy(EntityEnemy enemy)
	{
		if(forestEnemies == null)
		{
			forestEnemies = new Vector<EntityEnemy>();
		}
		forestEnemies.add(enemy);
	}
	
	/**
	 * add an enemy to the desertEnemies vector
	 * @param enemy to add.
	 */
	public void addDesertEnemy(EntityEnemy enemy)
	{
		if(desertEnemies == null)
		{
			desertEnemies = new Vector<EntityEnemy>();
		}
		desertEnemies.add(enemy);
	}
	
	/**
	 * add an enemy to the arcticEnemies vector
	 * @param enemy to add.
	 */
	public void addArcticEnemy(EntityEnemy enemy)
	{
		if(arcticEnemies == null)
		{
			arcticEnemies = new Vector<EntityEnemy>();
		}
		arcticEnemies.add(enemy);
	}
	
	/**
	 * add an enemy to the nightEnemies vector
	 * @param enemy to add.
	 */
	public void addNightEnemy(EntityEnemy enemy)
	{
		if(nightEnemies == null)
		{
			nightEnemies = new Vector<EntityEnemy>();
		}
		nightEnemies.add(enemy);
	}
	
	public Vector<EntityEnemy> forestEnemies;
	public Vector<EntityEnemy> desertEnemies;
	public Vector<EntityEnemy> arcticEnemies;
	public Vector<EntityEnemy> nightEnemies;
}